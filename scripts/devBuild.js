// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";


// Remove clearConsole cause it's annoying
require('react-dev-utils/clearConsole');
const clearConsole = ()=>{
    // "Clear" console
    const lines = process.stdout.getWindowSize()[1];
    for(let i = 0; i < lines; i++)
        console.log("\r\n");
}
require.cache[require.resolve('react-dev-utils/clearConsole')].exports = clearConsole;



const chalk = require("chalk");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const {choosePort,
       createCompiler,
       prepareProxy,
       prepareUrls} = require("react-dev-utils/WebpackDevServerUtils");
const openBrowser = require("react-dev-utils/openBrowser");
const getConfig = require("./config");

module.exports = async function devBuild(args) {
    try {
        // Attempt to connect w/ default port
        //  but offer other ports using `choosePort`
        const HOST = process.env.HOST || "0.0.0.0";
        const port = await choosePort(HOST, 3000);
        if (!port)
            return;


        const config = getConfig("development");
        const webpackConfig = require("./webpack.config.js")(config);




        // Prepare custom webpack dev
        const urls = prepareUrls("http", HOST, port, "");
        const devSocket = {
            warnings: warnings => server.sockWrite(server.sockets, "warnings", warnings),
            errors: errors => server.sockWrite(server.sockets, "errors", errors)
        };

        // Create webpack compiler w/ custom messages
        const compiler = createCompiler({
            appName: "OpenCircuits",
            config: webpackConfig,
            devSocket,
            urls,
            useYarn: false,
            useTypescript: true,
            tscCompileOnError: false,
            webpack
        });

        // Load proxy config
        const proxySetting = require(config.packageJsonPath).proxy;
        const proxyConfig = prepareProxy(proxySetting, config.publicPath, "");

        // Serve webpack assets generated by the compiler over a web server
        const serverConfig = require("./webpack.dev.config.js")(
            proxyConfig,
            urls.lanUrlForConfig,
            config
        );

        const server = new WebpackDevServer(compiler, serverConfig);

        // Launch server
        server.listen(port, HOST, err => {
            if (err)
                return console.log(err);

            clearConsole();

            console.log(chalk.cyan("Starting the development server...\n"));
            openBrowser(urls.localUrlForBrowser);
        });

        // Check for exit signals
        ["SIGINIT", "SIGTERM"].forEach(sig => {
            process.on(sig, () => {
                server.close();
                process.exit();
            });
        });

        if (process.env.CI !== "true") {
            // Gracefully exit when stdin ends
            process.stdin.on("end", () => {
                server.close();
                process.exit();
            });
        }

        // const options = {
        //     contentBase: config.publicPath,
        //     publicPath: "/",
        //     hot: true,
        //     inline: true,
        //     stats: { colors: true },
        //     port: 8080
        // };

        // const server = new WebpackDevServer(webpack(webpackConfig), options);

        // server.listen(8080, "localhost", (err) => {
        //     if (err)
        //         console.error(err);
        //     console.log("WebpackDevServer listening at localhost:8080");

        //     openBrowser("http://localhost:8080/");
        // })
    } catch (err) {
        if (err && err.message)
            console.log(err.message);
        process.exit(1);
    }
}